/* use of slow and fast pointer */ 
/* move slow pointer by one step and fast pointer by two steps. move loop till the fast is not equal to NULL or next of fast is not NULL(if any Null then no cycle exists). if at any time slow pointer equals fast pointer then return true, else return false */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *fast, *slow;
        fast = head;
        slow = head;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }
};

// TC : O(n) 
// SC : O(1) 
